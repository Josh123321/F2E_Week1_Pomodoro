{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["wrapperStyle","display","flexDirection","height","mainStyle","justifyContent:","flex-wrap","backgroundColor","flexBasis","flexGrow","color","subStlye","barStyle","justifyContent","alignItems","paddingTop","barIconStyle","Task","_ref","text","_ref$done","done","taskStyle","opacity","textDecoration","react_default","a","createElement","style","margin","padding","borderRadius","width","wordWrap","index_esm","App","className","size","App_Task","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f31432f7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport './style/css/main.css';\r\n\r\n\r\nimport { MdPlayCircleOutline,MdPauseCircleOutline,MdReplay,MdClear,MdAddCircleOutline,MdPlayArrow,MdDone,MdHome,MdInsertChart,MdSettings,MdSubject,MdFreeBreakfast } from 'react-icons/md';\r\n\r\n\r\n\r\n// import styled from 'styled-component';\r\n\r\nconst wrapperStyle = {\r\n  'display':'flex',\r\n  'flexDirection':'row',\r\n  'height':'100vh'\r\n}\r\n\r\nconst mainStyle= {\r\n  'display':'flex',\r\n  'justifyContent:':'space-around',\r\n  'flex-wrap':'wrap',\r\n  'backgroundColor':'#1B2A3B',\r\n  'flexBasis':'55%',\r\n  'flexGrow':'1',\r\n  'color':'#fff',\r\n};\r\n\r\nconst subStlye= {\r\n  'backgroundColor':'#283645',\r\n  'flexGrow':'1',\r\n  'flexBasis':'45%'\r\n};\r\n\r\nconst barStyle= {\r\n  'display':'flex',\r\n  'backgroundColor':'#0D151D',\r\n  'flexBasis':'5%',\r\n  'color':'#fff',\r\n  'flexDirection':'column',\r\n  'justifyContent': 'start',\r\n  'alignItems': 'center',\r\n  'paddingTop':'2vh'\r\n};\r\n\r\nconst barIconStyle= {\r\n  'paddingTop':'10px'\r\n}\r\n\r\nconst Task = ({text,done=false}) => {\r\n  const taskWrapperStyle = {\r\n    backgroundColor:'#1B2A3B',\r\n    margin:'5px',\r\n    padding:'5px',\r\n    borderRadius:'5%',\r\n    width:'20vw',\r\n    wordWrap:'break-word'\r\n  }\r\n  const taskStyle = !done ? \r\n                    {\r\n                        'color':'#fff'\r\n                    } :\r\n                    {\r\n                        'color':'#fff',\r\n                        'opacity':'0.5',\r\n                        'textDecoration':'line-through'\r\n                    };\r\n  return(\r\n    <div style={taskWrapperStyle}>\r\n      { !done ? <MdPlayArrow color=\"f4d035\"/> : <MdDone color=\"f4d035\"/> } {'  '}\r\n      <span style={taskStyle}>{text}</span>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nconst App = () => {\r\n  return (\r\n      <div className=\"wrapper\" style={wrapperStyle}>\r\n        {/** 時鐘區塊 */}\r\n        <div className=\"main-div\" style={mainStyle}>\r\n                  <div className=\"main-info-block\">\r\n                    <div className=\"start-time\">\r\n                        <p className=\"main-info-title\">2019/07/20</p>\r\n                        <p className=\"main-info-value\">06:30</p>\r\n                    </div>\r\n\r\n                    <div className=\"task-list\">\r\n                        <p className=\"main-info-title\">Done / To Do</p>\r\n                        <p className=\"main-info-value\">2/10</p> \r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"clock-wrapper\">\r\n                    <div className=\"clock\">\r\n                      <div className=\"task-name\">-Start Work-</div>\r\n                      <div className=\"timer\">25:00</div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"btn-group\">\r\n                      <MdClear  size=\"50px\" color=\"#fff\"/>\r\n                      <MdPlayCircleOutline  size=\"80px\" color=\"#fff\"/>\r\n                      <MdReplay  size=\"50px\" color=\"#fff\"/>\r\n                  </div>\r\n        </div>\r\n        \r\n        {/** 任務控管區塊 */}\r\n        <div className=\"sub-div\" style={subStlye}>    \r\n              <div className=\"add-task-btn-wrapper\">          \r\n                  <button className=\"add-task-btn\"><MdAddCircleOutline />Add Task</button>\r\n              </div>\r\n              <div className=\"todo-block\">\r\n                  <h2 className=\"todo-title\">To Do</h2>\r\n                    <Task text=\"1.The first task to do today\" />\r\n                    <Task text=\"2.The second task to do today\" />\r\n                    <Task text=\"3.The third task to do today\" />\r\n\r\n                  <h2 className=\"todo-title\">Done</h2>\r\n                    <Task done={true} text=\"1.The first task to do today\" />\r\n                    <Task done={true} text=\"2.The second task to do today\" />\r\n                    <Task done={true} text=\"3.The third task to do today\" />\r\n              </div>\r\n        </div> \r\n        \r\n        {/** icon選單 */}\r\n        <div className=\"side-bar\" style={barStyle}>   \r\n            <MdHome color=\"#fff\" size=\"36px\" style={barIconStyle}/>\r\n            <MdSubject color=\"#fff\" size=\"36px\" style={barIconStyle}/>\r\n            <MdFreeBreakfast color=\"#fff\" size=\"36px\" style={barIconStyle}/>\r\n            <MdInsertChart color=\"#fff\" size=\"36px\" style={barIconStyle}/>\r\n            <MdSettings color=\"#fff\" size=\"36px\" style={barIconStyle}/>\r\n            <p>POMODORO</p>\r\n        </div>\r\n     \r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}